<?php

namespace ContainerVDbHL46;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Firewall_Map_Context_UvdeskApiService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'security.firewall.map.context.uvdesk_api' shared service.
     *
     * @return \Symfony\Bundle\SecurityBundle\Security\FirewallContext
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallContext.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Util/TargetPathTrait.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-http/Firewall/ExceptionListener.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/security-bundle/Security/FirewallConfig.php';

        $a = ($container->privates['Webkul\\UVDesk\\ApiBundle\\Security\\Guards\\APIGuard'] ?? $container->load('getAPIGuardService'));

        if (isset($container->privates['security.firewall.map.context.uvdesk_api'])) {
            return $container->privates['security.firewall.map.context.uvdesk_api'];
        }

        return $container->privates['security.firewall.map.context.uvdesk_api'] = new \Symfony\Bundle\SecurityBundle\Security\FirewallContext(new RewindableGenerator(function () use ($container) {
            yield 0 => ($container->privates['security.channel_listener'] ?? $container->load('getSecurity_ChannelListenerService'));
            yield 1 => ($container->privates['security.context_listener.1'] ?? $container->load('getSecurity_ContextListener_1Service'));
            yield 2 => ($container->privates['security.authentication.listener.guard.uvdesk_api'] ?? $container->load('getSecurity_Authentication_Listener_Guard_UvdeskApiService'));
            yield 3 => ($container->privates['security.authentication.listener.anonymous.uvdesk_api'] ?? $container->load('getSecurity_Authentication_Listener_Anonymous_UvdeskApiService'));
            yield 4 => ($container->privates['security.access_listener'] ?? $container->load('getSecurity_AccessListenerService'));
        }, 5), new \Symfony\Component\Security\Http\Firewall\ExceptionListener(($container->services['.container.private.security.token_storage'] ?? $container->get_Container_Private_Security_TokenStorageService()), ($container->privates['security.authentication.trust_resolver'] ?? ($container->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver())), ($container->privates['security.http_utils'] ?? $container->load('getSecurity_HttpUtilsService')), 'uvdesk_api', $a, NULL, NULL, ($container->privates['monolog.logger.security'] ?? $container->load('getMonolog_Logger_SecurityService')), false), NULL, new \Symfony\Bundle\SecurityBundle\Security\FirewallConfig('uvdesk_api', 'security.user_checker', '.security.request_matcher.p4VlLPC', true, false, 'Webkul\\UVDesk\\ApiBundle\\Providers\\ApiCredentials', 'uvdesk_api', 'Webkul\\UVDesk\\ApiBundle\\Security\\Guards\\APIGuard', NULL, NULL, [0 => 'guard', 1 => 'anonymous'], NULL));
    }
}
